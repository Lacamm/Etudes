class Jeu
!!!154883.java!!!	Jeu()
        this.listeDonjons = new ArrayList<>();
!!!155011.java!!!	getPersonnage() : Personnage
        return this.personnage_courant;
!!!155139.java!!!	getNombre_piece_courante() : int
        return nombre_piece_courante;
!!!155267.java!!!	getDonjon(in nom : String) : Donjon
        for(Donjon donjon : this.listeDonjons)
        {
            if(donjon.getNom().equals(nom))
                return donjon;
        }
        return null;
!!!155395.java!!!	findDonjon(in nom : String) : boolean
        for(Donjon donjon : this.listeDonjons)
        {
            if(donjon.getNom().equals(nom))
                return true;
        }
        return false;
!!!155523.java!!!	setMonContexte(inout monContexte : Contexte) : void
        this.monContexte = monContexte;
!!!155651.java!!!	getEtatCourant() : EtatJeu
 return monContexte.getEtat_courant();
!!!155779.java!!!	getDonjon_courant() : Donjon
        return this.donjon_courant;
!!!155907.java!!!	getPiece_courante() : Piece
        return this.piece_courante;
!!!156035.java!!!	getPersonnage_courant() : Personnage
        return personnage_courant;
!!!156163.java!!!	add_donjon(inout donjon : Donjon) : void
 this.listeDonjons.add(donjon);
!!!156291.java!!!	afficherMenu() : void
        System.out.println("############## Menu ##############");
        System.out.println("Liste des donjons disponibles : ");
        for(Donjon donjon : this.listeDonjons) {
                if (donjon.isReussi())
                    System.out.println(donjon.getNom() + ": Réussi");
                else
                    System.out.println(donjon.getNom() + ": Non réussi");
        }
        System.out.println("###################################\n");

!!!156419.java!!!	creer_Personnage(in nom : String, inout fabrique : FabriquePersonnage) : void
        // Cette méthode permet de créer un personnage avec la fabrique passée en paramètre
        this.personnage_courant = fabrique.creerPersonnage(nom);
        System.out.println("Le personnage " + nom + " de la classe " + this.personnage_courant.getClasse() + " a été crée.");
!!!156547.java!!!	entrerDonjon(in nom : String) : void
        // Cette méthode permet d'entrer dans un donjon
        if(this.findDonjon(nom)) {
            this.donjon_courant = this.getDonjon(nom);
            System.out.println(this.getPersonnage_courant().getNom() + " décide d'aller dans le donjon " + nom + ".");
            this.piece_courante = this.donjon_courant.get_piece(0);
            this.nombre_piece_courante = 0;
            System.out.println("############## " + this.personnage_courant.getNom() + " entre dans un donjon ##############");
            this.piece_courante.afficher_ennemis();
        }
        else
            System.out.println("Le donjon " + nom + " n'existe pas.");
!!!156675.java!!!	attaquer(in nom_adversaire : String) : void
        // Cette méthode permet de faire attaquer tout les PNJ présents dans une pièce (le personnage comme les montres)
        ArrayList<PNJ> morts = new ArrayList<>();
        this.personnage_courant.attaquer(this.piece_courante.getEnnemis(nom_adversaire));
        for(PNJ adversaires : this.piece_courante.getListeEnnemis())
        {
            if(adversaires.getVie() <= 0)
                morts.add(adversaires);
            else
                adversaires.attaquer(this.personnage_courant);

        }
        // Verification des monstres qui ont été tué ( realisé ici car exception sinon)
        if(!morts.isEmpty())
        {
            for(PNJ mort : morts)
            {
                this.piece_courante.delEnnemis(mort);
                this.piece_courante.getListeVaincus().add(mort);
            }
        }

        // Affichage des PV de tout le monde
        if(this.personnage_courant.getVie() >= 0)
        {
            System.out.println("------------ Fin de tour ----------");
            System.out.println("PV de " + this.personnage_courant.getNom() + " : " + this.personnage_courant.getVie() + "/" + this.personnage_courant.getVieMax());
            for(PNJ adversaires : this.piece_courante.getListeEnnemis())
            {
                System.out.println("PV de " + adversaires.getNom() + " le " + adversaires.getClasse() + " : " + adversaires.getVie() + "/" + adversaires.getVieMax());
            }
            System.out.println("-----------------------------------");
        }
!!!156803.java!!!	pieceSuivante() : void
        // Cette méthode permet de changer de pièce
        this.piece_courante = this.donjon_courant.get_piece(this.nombre_piece_courante + 1);
        this.nombre_piece_courante+= 1;
        System.out.println(this.personnage_courant.getNom() + " change de pièce.");
        this.piece_courante.afficher_ennemis();
!!!156931.java!!!	sortieDonjon() : void
        // Cette méthode permet de sortir du donjon dans le cas ou le donjon est fini
        System.out.println("Le donjon est terminée, les récompenses de ce donjon vont être ajouté à votre inventaire.");
        System.out.println("Voici la liste des récompenses : ");
        System.out.println("    Argent => 20 $");
        this.donjon_courant.setReussi(true);
        this.personnage_courant.setArgent(this.personnage_courant.getArgent() + 20);
        for(Objet recompenses : this.donjon_courant.getRecompenses())
        {
            System.out.println("    " + recompenses.getNom() + " => " + recompenses.getEffet());
            this.personnage_courant.getMonInventaire().ajouterObjet(recompenses);
        }
        System.out.println("\n############## " + this.personnage_courant.getNom() + " sort du donjon ##############\n");
!!!157059.java!!!	fuirDonjon() : void
        // Cette méthode permet de sortir du donjon avant de le finir
        this.donjon_courant.save();
        System.out.println(this.personnage_courant.getNom() + " décide de fuir.");
        System.out.println("\n############## " + this.personnage_courant.getNom() + " sort du donjon " + this.donjon_courant.getNom() + " ##############\n");
!!!157187.java!!!	mortPerso() : void
        // On recupere le nom de tous les items dans l'inventaire
        System.out.println("✞ Vous êtes mort ✞");
        ArrayList<String> nom_items = new ArrayList<>();
        for (Map.Entry<Objet, Integer> entree : this.personnage_courant.getMonInventaire().getInventaire().entrySet()) {
            if (entree.getValue() == 1)
                nom_items.add(entree.getKey().getNom());
            else {
                for (int i = 0; i < entree.getValue(); i++) {
                    nom_items.add(entree.getKey().getNom());
                }
            }
        }
        // On supprime ensuite 1/3 des items présents dans l'inventaire
        int cpt = (nom_items.size() / 3);
        if(cpt == 0) // Il se peut qu'avec la convertion, cpt soit egal à 0
            cpt = 1;
        int alea = 0;
        System.out.println("Vous perdez la moitié de votre argent ainsi que ces items :");
        for (int y = 0; y < cpt; y++) {
            Random random = new Random();
            alea = random.nextInt(nom_items.size());
            System.out.println("    " + nom_items.get(alea));
            Objet objet = this.personnage_courant.getMonInventaire().getObjet(nom_items.get(alea));
            if(this.personnage_courant.getMonInventaire().getInventaire().get(objet) == 1)
                this.personnage_courant.getMonInventaire().getInventaire().remove(objet);
            else
                this.personnage_courant.getMonInventaire().getInventaire().put(objet,this.personnage_courant.getMonInventaire().getInventaire().get(objet) - 1);
            nom_items.remove(alea);
        }
        this.personnage_courant.setVie(1);
        this.personnage_courant.setArgent(this.personnage_courant.getArgent() / 2);
        this.donjon_courant.save();
!!!157315.java!!!	ameliorer(in nom_objet : String) : void
        Objet inventaire = this.getPersonnage().getMonInventaire().getObjet(nom_objet);
        Objet equipement = this.getPersonnage().getMonInventaire().getEquipement(nom_objet);
        if(inventaire != null) {
            if (inventaire.getType() != Objet.TYPE.CONSOMMABLE) {
                if (!inventaire.isAmeliore()) {
                    if (this.personnage_courant.getArgent() >= 5) {
                        Amelioration a = new Forger(inventaire);
                        this.personnage_courant.setArgent(this.personnage_courant.getArgent() - 5);
                        System.out.println(nom_objet + " a été amélioré");
                        System.out.println("Il reste à "+this.personnage_courant.getNom() + " " + this.personnage_courant.getArgent() + " $");
                    } else {
                        System.out.println("Vous n'avez pas assez d'argent pour amélioré votre " + nom_objet);
                    }
                }
                else{
                    System.out.println("Votre objet est déja amélioré");
                }
            }
            else
            {
                System.out.println("Vous ne pouvez pas améliorer un consommable");
            }
        }
        else if(equipement != null) {
            if (equipement.getType() != Objet.TYPE.CONSOMMABLE) {
                if (!equipement.isAmeliore()) {
                    if (this.personnage_courant.getArgent() >= 5) {
                        this.personnage_courant.desequiperObjetA(nom_objet);
                        Amelioration a = new Forger(equipement);
                        this.personnage_courant.equiperObjetA(nom_objet);
                        this.personnage_courant.setArgent(this.personnage_courant.getArgent() - 5);
                        System.out.println(nom_objet + " a été amélioré");
                        System.out.println("Il reste à "+this.personnage_courant.getNom() + " " + this.personnage_courant.getArgent() + " $");
                    } else {
                        System.out.println("Vous n'avez pas assez d'argent pour amélioré votre " + nom_objet);
                    }
                }
                else{
                    System.out.println("Votre objet est déja amélioré");
                }
            }
            else
            {
                System.out.println("Vous ne pouvez pas améliorer un consommable");
            }
        }
        else{
            System.out.println("Vous ne possedez pas l'objet " + nom_objet);
        }

!!!157443.java!!!	equiperObjet(in nom_objet : String) : void
        this.personnage_courant.equiperObjet(nom_objet);
!!!157571.java!!!	desequiperObjet(in nom_objet : String) : void
        this.personnage_courant.desequiperObjet(nom_objet);
!!!157699.java!!!	consommerObjet(in nom_objet : String) : void
        this.personnage_courant.consommerObjet(nom_objet);
!!!157827.java!!!	jeterObjet(in nom_objet : String) : void
this.personnage_courant.jeterObjet(nom_objet);
!!!157955.java!!!	addMarchand(inout marchand : Marchand) : void
        this.marchand = marchand;
!!!158083.java!!!	afficherBoutique() : void
        this.marchand.afficherBoutique();
!!!158211.java!!!	afficherStocks() : void
        this.marchand.afficherStocks();
!!!158339.java!!!	acheter(in nom_objet : String) : void
        this.marchand.acheter(this.personnage_courant,nom_objet);
